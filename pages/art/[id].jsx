/* eslint-disable @next/next/no-img-element */
import { useEffect, useState } from "react";
import { useRouter } from "next/router";
import { backendClient } from "@/services/backendClient";
import Layout from "@/components/Layout";
import ImageCard from "@/components/molecules/ImageCard";
import ArtImage from "@/components/molecules/ArtImage";
import { storeFile } from "@/lib/ipfs";

export default function ArtPage() {
  const router = useRouter();
  const { id } = router.query;

  const [art, setArt] = useState();
  const [nft, setNft] = useState();

  useEffect(() => {
    async function getArt() {
      const response = await backendClient.get(`art/${id}`);
      setArt(response.result);
    }
    getArt();
  }, []);

  useEffect(() => {
    async function getNft(nftId) {
      const response = await backendClient.get(`nft/${nftId}`);
      setNft(response.result);
    }
    if (art?.nftId) {
      getNft(art?.nftId);
    }
  }, [art]);

  const mintNft = async () => {
    // Check stuff... like...is it minted? how many? does it have Meta on ispf?
    const {
      imageUrl,
      seed,
      date,
      headline,
      prompt,
      version,
      model,
      modelVersion,
    } = art;

    if (!nft) {
      // Ok, first step is to prep metadata and put to IPFS:
      const meta = {
        artId: id,
        imageUrl,
        headline,
        seed,
        date,
        prompt,
        version,
        model,
        modelVersion,
      };
      const storeFileResponse = await storeFile({
        imageUrl,
        meta,
        useMock: true,
      });
      const { url: ipfsUrl, ipnft } = storeFileResponse;

      const createResult = await backendClient.post("nft", {
        body: {
          ipfsUrl,
          cid: ipnft,
          artId: id,
          prompt,
          version,
          model,
          modelVersion,
          seed,
          headline,
          date,
          imageUrl,
        },
      });
      setNft(createResult.result);

      // Now lets update art with the nft db-reference:
      await backendClient.put(`art/${id}`, {
        body: {
          ...art,
          nftId: createResult.result.id,
        },
      });
    } else {
      console.log("lets do mint!");
      const backendResponse = await backendClient.get("hre/base-token-uri");
      if (backendResponse.result !== nft.ipfsUrl) {
        console.log(
          `Must change base-uri from ${backendResponse.result} to ${nft.ipfsUrl}`,
        );
        const transactionResponse = await backendClient.put(
          "hre/base-token-uri",
          {
            body: { baseTokenUri: nft.ipfsUrl },
          },
        );
        console.log("transactionResponse:", transactionResponse);
      }
      console.log("And now we are ready to make the transfer?");
    }
  };

  if (!art) {
    return <>Loading...</>;
  }

  const { headline, votes, date, imageUrl, seed, selected } = art;

  let ipfsImageSrc;
  if (nft?.meta?.image) {
    ipfsImageSrc = `/api/nft/image?src=${encodeURIComponent(nft.meta.image)}`;
  }
  return (
    <Layout
      title={`Art ${id}`}
      description="This art was generated by an AI with the input of an wordly event of its date. Now embrace its uniquenes and become its owner!"
    >
      <main style={{ padding: 16, textAlign: "-webkit-center" }}>
        <ImageCard key={id}>
          <ImageCard.Heading>{headline}</ImageCard.Heading>
          <ImageCard.Image>
            <ArtImage
              imageUrl={ipfsImageSrc || imageUrl}
              alt={headline}
              size="available"
              ipfs={!!ipfsImageSrc}
            />
          </ImageCard.Image>
          <ImageCard.PropsWrapper>
            <ImageCard.ButtonProp onClick={mintNft}>
              Mint NFT
            </ImageCard.ButtonProp>
            <ImageCard.SelectProp
              type="art"
              id={id}
              selected={selected}
              closed={true}
            />
            <ImageCard.VoteProp
              type="art"
              id={id}
              votes={votes}
              closed={true}
            />
            <ImageCard.Prop>{seed}</ImageCard.Prop>
            <ImageCard.Prop>{date}</ImageCard.Prop>
          </ImageCard.PropsWrapper>
        </ImageCard>
        <section>
          <div>
            If the art above has a green left border, it is an healthy
            indication of it being hosted on the decetralized ipfs network. If
            not, a red thin border is shown.
          </div>
        </section>
      </main>
    </Layout>
  );
}
